namespace Templates
{
    Параметрический полиморфизм (в C++ - реализован с помощью шаблонов).
    Шаблоны позволяют одному и тому же программному коду быть использованным относительно разных типов, где тип - параметр шаблона.
    Типы шаблонов:
        - Шаблоны-функции ( Шаблоны-определения функций )
        - Шаблоны-классы ( Габлоны-определения классов )
    Шаблон - конструкция языка, определяющая семейство функций или семейство классов.
    Реальные классы или функции генерируются на этапе компиляции(!) путем конкретизации.
    Конкретизация - создание функции или класса путем подстановки вместо параметров шаблона фактических значений типов.
    Точка конкретизации - место в теле программы, где происходит конкретизация шаблона.
    Специализация шаблона - результирующий класс или функция, получающаяся заменой параметров конкретными значениями.
    Специализация может произойти:
        - В результате конкретизации
        - В результате явной специализации
    Для неподходящих типов пишется отдельное тело ( явная специализации для конкретного типа - инстанцирование )


        - Предваряются ключевым словоь template
        - Расширяются автоматически до полного определения классов
        - Шаблоны классов не могут быть вложены в другие классы(???)
        - Шаблоны могут иметь нетипированные параметры // see in examples

    Шаблонные классы могут быть порождены от (не)шаблонных классов
    Шаблонные классы могут могут быть явно специализированы для того, чтобы выполнять, или не выполнять какие-либо действия 
    Явная специализация класса должна определять все поля и методы
    Можно явно специализировать функции-члены класса

    Статические члены класса.
        Статические данные разделяются всеми объектами для каждого экземпляра класса
    Статические функции-члены определяются в области видимости файла
    Невозможно скомпилировать отдельный шаблон(все тело в .h)
}