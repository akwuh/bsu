package billiard;

import java.awt.Color;
import java.awt.Graphics;
import static java.lang.Math.*;

public class Frame extends javax.swing.JFrame {
    
    private Field f;
    private Graphics g;
    private float cue_angle = 0;
    private long timer;

    public Frame(Field _f) {
        initComponents();
        setVisible(true);
        f = _f;
    }
    
    public void DrawPocket(Pocket p)
    {
        g.setColor(Color.WHITE);
        g.fillOval(p.x-p.r, p.y-p.r, 2*p.r, 2*p.r);
        g.setColor(Color.BLACK);
        g.drawOval(p.x-p.r, p.y-p.r, 2*p.r, 2*p.r);
    }
    
    public void DrawBall(Ball b, int mode) //mode = 1 - черный шар, mode = 0 - белый
    {
        if (b.energy > 0)
        {
            for (Pocket p: f.pockets)
            {
                if (b.HitInPocket(p))
                    return;
            }
            b.BounceWall(f.x, f.y, f.w, f.h);
        }
        b.Refresh();
        if (mode == 0)
        {
            g.setColor(Color.WHITE);
            g.fillOval(b.x-b.r, b.y-b.r, 2*b.r, 2*b.r);
            g.setColor(Color.BLACK);
            g.drawOval(b.x-b.r, b.y-b.r, 2*b.r, 2*b.r);
        }
        else
            g.fillOval(b.x-b.r, b.y-b.r, 2*b.r, 2*b.r);
            
    }
    
    public void Draw()
    {
        g = getGraphics();
        g.clearRect(Panel.getX(), Panel.getY(), getWidth(), getHeight());
        
        g.drawRect(f.x, f.y, f.w, f.h);     //рисуем борты
        g.setColor(Color.BLACK);
        for (Pocket p: f.pockets)
            DrawPocket(p);
        //g.setColor(Color.WHITE);
        int mode = 0;
        for (Ball b: f.balls)
        {
            if (b.energy > 0)
            {
                for (Ball b1: f.balls)
                {
                    if (b1 != b && b.IsNearTo(b1))
                        b.BounceBall(b1);
                }
            }
            DrawBall(b, mode);
            if (mode == 0)
                mode = 1;
        }
        Panel.paintComponents(g);
    }
    
    private void Cue(int m_x, int m_y)
    {
        int w_x = f.balls[0].x, w_y = f.balls[0].y;
        float a = (float)(m_y-w_y), b = (float)(m_x-w_x), 
                tg = (float)(a/b);
        int n_x = 0, n_y = 0;
        int r = 30;
        cue_angle = b >= 0 ? (float)atan(tg) : (float)(atan(tg) + PI);
        n_x = (int)(r*cos(cue_angle));
        n_y = (int)(r*sin(cue_angle));
        g.setColor(Color.RED);  //устанавливаем красный цвет для кия
        g.drawLine(w_x + n_x, w_y + n_y, w_x + 4*n_x, w_y + 4*n_y);
        g.drawLine(w_x + n_x + 1, w_y + n_y, w_x + 4*n_x + 1, w_y + 4*n_y);
        g.setColor(Color.BLACK);
        Panel.paintComponents(g);
    }
    
    private boolean HasEnergy()
    {
        for (Ball b: f.balls)
        {
            if (b.energy > 0)
                return true;
        }
        return false;
    }
    
    private void Hit(float power)
    {
        Ball b = f.balls[0];
        b.HitBall(power, (float) (PI+cue_angle));
        while (HasEnergy())
        {
            try {Thread.sleep(10);} 
            catch (Exception e) { }
            Draw();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                MouseEvent(evt);
            }
        });
        Panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MouseEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseEvent
        int _x = evt.getX(), _y = evt.getY();
        try {Thread.sleep(10);} 
        catch (Exception e) { }
        Draw();
        Cue(_x, _y);
    }//GEN-LAST:event_MouseEvent

    private void MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MousePressed
        timer = System.nanoTime();
    }//GEN-LAST:event_MousePressed

    private void MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseReleased
        timer = (System.nanoTime() - timer) / 1000000;
        if (timer > 5000)
            timer = 5000;
        double p = 1 + 2*(double)timer / 1000;
        Hit((float)p);
    }//GEN-LAST:event_MouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel;
    // End of variables declaration//GEN-END:variables
}
