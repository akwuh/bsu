-- MySQL Script generated by MySQL Workbench
-- Tue Oct 17 13:39:31 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`tourists`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`tourists` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `level` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`tours`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`tours` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `level` VARCHAR(45) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`stops`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`stops` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`trips`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`trips` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `duration` INT NOT NULL,
  `started` TINYINT NOT NULL DEFAULT 0,
  `completed` TINYINT NOT NULL DEFAULT 0,
  `leader_id` INT NOT NULL,
  `tours_id` INT NOT NULL,
  PRIMARY KEY (`id`, `tours_id`),
  INDEX `fk_trips_tourists_idx` (`leader_id` ASC),
  INDEX `fk_trips_tours1_idx` (`tours_id` ASC),
  CONSTRAINT `fk_trips_tourists`
    FOREIGN KEY (`leader_id`)
    REFERENCES `mydb`.`tourists` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trips_tours1`
    FOREIGN KEY (`tours_id`)
    REFERENCES `mydb`.`tours` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`tours_stops`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`tours_stops` (
  `tours_id` INT NOT NULL,
  `stops_id` INT NOT NULL,
  `order` INT NULL,
  PRIMARY KEY (`tours_id`, `stops_id`),
  INDEX `fk_tours_has_stops_stops1_idx` (`stops_id` ASC),
  INDEX `fk_tours_has_stops_tours1_idx` (`tours_id` ASC),
  CONSTRAINT `fk_tours_has_stops_tours1`
    FOREIGN KEY (`tours_id`)
    REFERENCES `mydb`.`tours` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tours_has_stops_stops1`
    FOREIGN KEY (`stops_id`)
    REFERENCES `mydb`.`stops` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`trips_stops`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`trips_stops` (
  `trips_id` INT NOT NULL,
  `stops_id` INT NOT NULL,
  `date` DATETIME NOT NULL,
  `status` VARCHAR(255) NOT NULL,
  `help` LONGTEXT NOT NULL,
  PRIMARY KEY (`trips_id`, `stops_id`),
  INDEX `fk_trips_has_stops_stops1_idx` (`stops_id` ASC),
  INDEX `fk_trips_has_stops_trips1_idx` (`trips_id` ASC),
  CONSTRAINT `fk_trips_has_stops_trips1`
    FOREIGN KEY (`trips_id`)
    REFERENCES `mydb`.`trips` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trips_has_stops_stops1`
    FOREIGN KEY (`stops_id`)
    REFERENCES `mydb`.`stops` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`trips_tourists`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`trips_tourists` (
  `trips_id` INT NOT NULL,
  `tourists_id` INT NOT NULL,
  PRIMARY KEY (`trips_id`, `tourists_id`),
  INDEX `fk_trips_has_tourists_tourists1_idx` (`tourists_id` ASC),
  INDEX `fk_trips_has_tourists_trips1_idx` (`trips_id` ASC),
  CONSTRAINT `fk_trips_has_tourists_trips1`
    FOREIGN KEY (`trips_id`)
    REFERENCES `mydb`.`trips` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trips_has_tourists_tourists1`
    FOREIGN KEY (`tourists_id`)
    REFERENCES `mydb`.`tourists` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`trips_BEFORE_INSERT` BEFORE INSERT ON `trips` FOR EACH ROW
BEGIN

    DECLARE tourist_level INT;
    DECLARE tour_level INT;

	IF NEW.started = 1
	THEN
	  SIGNAL  SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Cannot start at the moment of creation';
	END IF;

    IF NEW.completed = 1 THEN
      SIGNAL  SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Cannot finish at the moment of creation';
    END IF;

     SET tourist_level = (SELECT level FROM tourists WHERE id = NEW.leader_id);
     SET tour_level = (SELECT level FROM tours WHERE id = NEW.tours_id);

     IF tourist_level < 2 AND tourist_level < tour_level THEN
        SET @message = concat('Leaders`s level should be greater than tour level, tour_level: ', tour_level,  ', leader_level: ', tourist_level);
	 SIGNAL  SQLSTATE '45000'
        SET MESSAGE_TEXT = @message;
	 END IF;

END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`trips_BEFORE_UPDATE` BEFORE UPDATE ON `trips` FOR EACH ROW
BEGIN
    DECLARE tourist_level INT;
    DECLARE tour_level INT;

	IF NEW.started > 0 AND (SELECT COUNT(*) FROM `mydb`.`trips_tourists` WHERE trips_id = NEW.id) < 4
	THEN
	  SIGNAL  SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Trip mush have 5+ participants';
	END IF;
    IF NEW.completed > 0 AND OLD.started = 0 THEN
      SIGNAL  SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Cannot finish until started';
    END IF;

     SET tourist_level = (SELECT level FROM tourists WHERE id = NEW.leader_id);
     SET tour_level = (SELECT level FROM tours WHERE id = NEW.tours_id);

     IF tourist_level < 2 AND tourist_level < tour_level THEN
        SET @message = concat('Leaders`s level should gte than tour level, tour_level: ', tour_level,  ', leader_level: ', tourist_level);
	 SIGNAL  SQLSTATE '45000'
        SET MESSAGE_TEXT = @message;
	 END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`trips_tourists_BEFORE_INSERT` BEFORE INSERT ON `trips_tourists` FOR EACH ROW
BEGIN
	DECLARE tourist_level INT;
    DECLARE tour_level INT;
    DECLARE tour_id INT;

    SET tourist_level = (SELECT level FROM tourists WHERE id = NEW.tourists_id);
    SET tour_id = (SELECT tours_id FROM trips WHERE id = NEW.trips_id);
    SET tour_level = (SELECT level FROM tours WHERE id = tour_id);

    IF tourist_level < tour_level THEN
        SET @message = concat('Tourist`s level should gte than tour level, tour_level: ', tour_level,  ', tourist_level: ', tourist_level);
      SIGNAL  SQLSTATE '45000'
        SET MESSAGE_TEXT = @message;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
